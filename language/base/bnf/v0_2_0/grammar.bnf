group AbstractGR = BuildGR | ParallelGR | Engine | Variable | String
group BuildGR = BuildToken | BuildLemma | BuildGroup
lemma BuildToken = 'token' $' ' Variable -> type $' ' '=' $' ' ParallelGR -> rule
lemma BuildLemma = 'lemma' ':i' -> indented $' ' Variable -> type $' ' '=' $' ' ParallelGR -> rule
lemma BuildGroup = 'group' $' ' Variable -> type $' ' '=' $' ' [$' ' '|' $' ']..Variable -> refs
group ParallelGR = SequenceGR | Parallel
group SequenceGR = RepeatGR | Sequence
group RepeatGR = GroupingGR | Repeat0 | Repeat1 | Optional | Enum0 | Enum1
group GroupingGR = AtomGR | Grouping
group AtomGR = Match | Literal | LiteralIf | Canonical | Store
lemma Match = '!' -> inverted String -> charset
lemma Literal = String -> expr
lemma LiteralIf = String -> expr $' ' '->' $' ' Variable -> key
lemma Canonical = '$' String -> expr
lemma Store = Variable -> type $' ' '->' $' ' Variable -> key
lemma Grouping = '[' ParallelGR -> rule ']'
lemma Repeat0 = '*' GroupingGR -> rule
lemma Repeat1 = '+' GroupingGR -> rule
lemma Optional = '?' GroupingGR -> rule
lemma Enum0 = GroupingGR -> separator '.' GroupingGR -> item
lemma Enum1 = GroupingGR -> separator '..' GroupingGR -> item
lemma Sequence = $' '..RepeatGR -> rules
lemma Parallel = [$' ' '|' $' ']..SequenceGR -> rules
lemma Engine = '\n'..BuildGR -> rules '\n' 'entry' $' ' Variable -> entry
token Variable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz' *'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'
token String = '"' *['\\' '"' | !'"'] '"' | "'" *['\\' "'" | !"'"] "'"
entry AbstractGR