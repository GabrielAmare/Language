group AbstractGR = BuildGR | ParallelGR | Engine | Variable | String | _Inverted | _Indented
group BuildGR = BuildToken | BuildLemma | BuildGroup
lemma BuildToken = 'token' $' ' <Variable as type> $' ' '=' $' ' <ParallelGR as rule>
lemma BuildLemma = 'lemma' ?<_Indented as indented> $' ' <Variable as type> $' ' '=' $' ' <ParallelGR as rule>
lemma BuildGroup = 'group' $' ' <Variable as type> $' ' '=' $' ' [$' ' '|' $' ']..<Variable in refs>
group ParallelGR = SequenceGR | Parallel
group SequenceGR = RepeatGR | Sequence
group RepeatGR = GroupingGR | Repeat0 | Repeat1 | Optional | Enum0 | Enum1
group GroupingGR = MatchGR | Grouping
group MatchGR = MatchChar | MatchAs | MatchIn | Literal | Canonical
lemma MatchChar = ?<_Inverted as inverted> <String as charset>
lemma MatchAs = '<' <Variable as type> $' ' 'as' $' ' <Variable as key> '>'
lemma MatchIn = '<' <Variable as type> $' ' 'in' $' ' <Variable as key> '>'
lemma Literal = <String as expr>
lemma Canonical = '$' <String as expr>
lemma Grouping = '[' <ParallelGR as rule> ']'
lemma Repeat0 = '*' <GroupingGR as rule>
lemma Repeat1 = '+' <GroupingGR as rule>
lemma Optional = '?' <GroupingGR as rule>
lemma Enum0 = <GroupingGR as separator> '.' <GroupingGR as item>
lemma Enum1 = <GroupingGR as separator> '..' <GroupingGR as item>
lemma Sequence = $' '..<RepeatGR in rules>
lemma Parallel = [$' ' '|' $' ']..<SequenceGR in rules>
lemma Engine = '\n'..<BuildGR in rules> '\n' 'entry' $' ' <Variable as entry>
token Variable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz' *'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'
token String = '"' *['\\' '"' | !'"'] '"' | "'" *['\\' "'" | !"'"] "'"
token _Inverted = '!'
token _Indented = ':i'
entry AbstractGR