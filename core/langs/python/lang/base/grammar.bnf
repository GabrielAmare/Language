########################################################################################################################
# LEXER
########################################################################################################################

regex Variable '[a-zA-Z]\w*'                                          
regex Integer '\d+'                                                   
regex Float '\d+\.\d*|\.\d+'                                          
regex Comment '#.*'                                                   
regex MultiLineString '\"\"\".*?\"\"\"' 16                            
regex String '\"(?:\"|[^\"])*?(?<!\\\\)\"|\'(?:\'|[^\'])*?(?<!\\\\)\''
regex WHITESPACE '[ \t\n\r]+' ignore                                  

########################################################################################################################
# ALIASES
########################################################################################################################

alias  S             := $' '    # simple space
alias  N             := $'\n'   # newline
alias  CS            := ',' <S> # comma then space
alias  CN            := ',' <N> # comma then newline
alias  SlashComma    := '/' ','
alias  SlashColon    := '/' ':' # TODO : implement positive lokahead with '&' and turn this to ',' &':'
alias  CommaOrColon  := ',' | ':' # TODO : implement positive lokahead with '&' and turn this to ',' | &':'
alias  DefaultValue  := '=' <Expression as value>
alias  AsName        := <S> 'as' <S> <Variable as as_name>
alias  ForPrefix     := 'for' <S> <StarTargetsGR as target> <S> 'in' <S>

########################################################################################################################
# LAMBDA
########################################################################################################################

branch LambdaDef  := '$' #'lambda' <S> ?<LambdaParams as params> ':' <S> <Expression as expr>

########################################################################################################################
# IMPORTS
########################################################################################################################

branch Alias               := <Variable as name> ?<AsName>
branch ImportAliases       := <CS>.<Alias in names> # TODO : rename `AliasList`.
branch ImportAll           := '*'
group  ImportFromTargets   := ImportAliases | ImportAll
                          
branch DottedAsName        := '.'.<Variable in names> ?<AsName>
branch ImportFrom          := 'from' <S> <ImportPath as path> <S> 'import' <S> <ImportFromTargets as targets>
branch Import              := 'import' <S> <CS>.<DottedAsName in targets>
group  ImportGR            := ImportFrom | Import
                          
branch ImportDot           := '.' # for relative paths
branch ImportEllipsis      := '...' # for relative paths (because '...' is matched for Ellipsis)
group  ImportRelative      := ImportDot | ImportEllipsis
                          
branch AbsoluteImportPath  := '.'.<Variable in variables>
branch RelativeImportPath  := +<ImportRelative in relatives> '.'.<Variable in variables>
group  ImportPath          := AbsoluteImportPath | RelativeImportPath

########################################################################################################################
# BODY
########################################################################################################################

branch Block '    '             := *[<N> <Statement in statements>]
branch Args                     := <CS>.<Variable in variables>
branch Argument                 := <Variable as name> ?[':' <S> <Expression as type>] ?[<S> '=' <S> <Expression as default>]
branch NonKeywordArgument       := '*' <Variable as name> ?[':' <S> <Expression as type>]
branch KeywordArgument          := '**' <Variable as name> ?[':' <S> <Expression as type>]
group  DefArgumentGR            := Argument | NonKeywordArgument | KeywordArgument
                               
branch Decorator                := '@' <Expression as expr>
alias  DecoratorList            := *[<Decorator in decorators> <N>]
alias  FunctionReturn           := <S> '->' <S> <Expression as rtype>
branch Def                      := <DecoratorList> 'def' <S> <Variable as name> '(' ?[<CS>.<DefArgumentGR in args>] ')' ?<FunctionReturn> ':' <Block as block>
branch Class                    := <DecoratorList> 'class' <S> <Variable as name> ?['(' <Args as mro> ')'] ':' <Block as block>
group  ClassGR                  := Def | Class
                               
group  MultiLineStatement       := ClassGR | MultiLineString
                               
branch DictItem                 := <Expression as key> ':' <S> <Expression as value> # TODO : renamed to KVPair
branch NoneClass                := 'None'
branch TrueClass                := 'True'
branch FalseClass               := 'False'
branch EllipsisClass            := '...'
group  Constant                 := NoneClass | TrueClass | FalseClass | EllipsisClass | Integer | Float | String
                               
group  AtomGR                   := Variable | Constant #| ListComp
                               
branch StarTargets              := <CS>..<AtomGR in elts>
group  StarTargetsGR            := StarTargets | Variable
                               
branch ForIfClause              := <S> <ForPrefix> <Disjunction as iter> *[<S> 'if' <S> <Disjunction in ifs>]
branch Tuple                    := '(' <CS>..<Expression in items> ')'
branch GenExp                   := '(' <Expression as elt> +<ForIfClause in generators> ')'
branch IndentedList             := '[' <IndentedExprEnum as body> <N> ']'
branch List                     := '[' <CS>.<Expression in items> ']'
branch ListComp                 := '[' <Expression as elt> +<ForIfClause in generators> ']'
branch Dict                     := '{' <CS>.<DictItem in items> '}' # TODO : implement DoubleStarredKVPair
branch DictComp                 := '{' <DictItem as elt> +<ForIfClause in generators> '}'
branch Set                      := '{' <CS>.<Expression in items> '}'
branch SetComp                  := '{' <Expression as elt> +<ForIfClause in generators> '}'
group  DataGR                   := Tuple | GenExp | List | ListComp | Dict | DictComp | Set | SetComp | IndentedList | AtomGR
                               
branch IndentedExprEnum '    '  := <N> <CN>.<Expression in items>
branch Slice                    := ?<Expression as lower> ':' ?<Expression as upper> ?[':' <S> <Expression as step>]
group  SliceGR                  := Slice | Expression
                               
branch Subscript                := <Primary as left> '[' <SliceGR as right> ']'
branch GetAttr                  := <Primary as left> '.' <Variable as right>
branch Call                     := <Primary as left> '(' <CS>.< CallArgumentGR in args> ')'
branch IndentedCallBody '    '  := <N> <CN>.<CallArgumentGR in args>
branch IndentedCall             := <Primary as left> '(' <IndentedCallBody as body> <N> ')'
group  Primary                  := Subscript | GetAttr | Call | IndentedCall | DataGR

########################################################################################################################
# EXPRESSIONS
########################################################################################################################

branch Or            := <Disjunction as left> <S> 'or' <S> <Conjunction as right>
group  Disjunction   := Or | Conjunction
                    
branch And           := <Conjunction as left> <S> 'and' <S> <Inversion as right>
group  Conjunction   := And | Inversion
                    
branch Not           := 'not' <S> <Inversion as right>
group  Inversion     := Not | Comparison
                    
alias  ComparisonL   := <Comparison as left> <S>
alias  ComparisonR   := <S> <BitwiseOrGR as right>
branch In            := <ComparisonL> 'in' <ComparisonR>
branch Is            := <ComparisonL> 'is' <ComparisonR>
branch NotIn         := <ComparisonL> 'not' <S> 'in' <ComparisonR>
branch IsNot         := <ComparisonL> 'is' <S> 'not' <ComparisonR>
branch Eq            := <ComparisonL> '==' <ComparisonR>
branch Ne            := <ComparisonL> '!=' <ComparisonR>
branch Le            := <ComparisonL> '<=' <ComparisonR>
branch Lt            := <ComparisonL> '<' <ComparisonR>
branch Ge            := <ComparisonL> '>=' <ComparisonR>
branch Gt            := <ComparisonL> '>' <ComparisonR>
group  Comparison    := NotIn | In | IsNot | Is | Eq | Ne | Le | Lt | Ge | Gt | BitwiseOrGR # TODO : rename Comparison
                    
branch BitwiseOr     := <BitwiseOrGR as left> <S> '|' <S> <BitwiseXorGR as right>
group  BitwiseOrGR   := BitwiseOr | BitwiseXorGR
                    
branch BitwiseXor    := <BitwiseXorGR as left> <S> '^' <S> <BitwiseAndGR as right>
group  BitwiseXorGR  := BitwiseXor | BitwiseAndGR
                    
branch BitwiseAnd    := <BitwiseAndGR as left> <S> '&' <S> <ShiftExpr as right>
group  BitwiseAndGR  := BitwiseAnd | ShiftExpr
                    
branch LShift        := <ShiftExpr as left> <S> '<<' <S> <Sum as right>
branch RShift        := <ShiftExpr as left> <S> '>>' <S> <Sum as right>
group  ShiftExpr     := LShift | RShift | Sum
                    
branch Add           := <Sum as left> <S> '+' <S> <Term as right>
branch Sub           := <Sum as left> <S> '-' <S> <Term as right>
group  Sum           := Add | Sub | Term
                    
branch Mul           := <Term as left> <S> '*' <S> <Factor as right>
branch TrueDiv       := <Term as left> <S> '/' <S> <Factor as right>
branch FloorDiv      := <Term as left> <S> '//' <S> <Factor as right>
branch Mod           := <Term as left> <S> '%' <S> <Factor as right>
branch MatMul        := <Term as left> <S> '@' <S> <Factor as right>
group  Term          := Mul | TrueDiv | FloorDiv | Mod | MatMul | Factor
                    
branch UAdd          := '+' <Factor as factor>
branch USub          := '-' <Factor as factor>
branch Invert        := '~' <Factor as factor>
group  Factor        := UAdd | USub | Invert | Power
                    
branch Pow           := <Primary as left> <S> '**' <S> <Factor as right>
group  Power         := Pow | Primary
                    
branch IfExp         := <Disjunction as body> <S> 'if' <S> <Disjunction as test> <S> 'else' <S> <Disjunction as or_else>
group  Expression    := IfExp | LambdaDef | Disjunction

########################################################################################################################
# CONTROL FLOW
########################################################################################################################

branch Else           := <N> 'else' ':' <Block as block>
branch Elif           := <N> 'elif' <S> <Expression as condition> ':' <Block as block> ?<ElseGR as alt>
group  ElseGR         := Else | Elif
                     
branch WithItem       := <Expression as context_expr> <S> 'as' <S> <Expression as optional_vars> # &[',' | ')' | ':']
branch Try            := 'try' ':' <Block as block> *<Except in excepts>
branch If             := 'if' <S> <Expression as condition> ':' <Block as block> ?<ElseGR as alt>
branch While          := 'while' <S> <Expression as condition> ':' <Block as block> ?<Else as alt>
branch For            := <ForPrefix> <Expression as iterator> ':' <Block as block> ?<Else as alt>
branch With           := 'with' <S> <CS>..<WithItem in items> ':' ?<Comment as type_comment> <Block as block>
group  ScopeGR        := Try | If | While | For | With  # TODO : rename to ScopeStatement or something that kind.

########################################################################################################################
# STATEMENTS
########################################################################################################################

branch Yield            := 'yield' <S> <Returnable as expr>
branch YieldFrom        := 'yield' <S> 'from' <S> <Returnable as expr>
branch Return           := 'return' ?[<S> <Returnable as expr>]
group  ReturnGR         := Return | YieldFrom | Yield
                       
branch AnnAssign        := <Primary as target> ?[':' <S> <Expression as annotation>] ?[<S> '=' <S> <Expression as value>]
branch AssignTuple      := <CS>..<Primary in args> <S> '=' <S> <Expression as value>
group  AssignGR         := AnnAssign | AssignTuple
                       
branch IAdd             := <Primary as obj> <S> '+=' <S> <Expression as expr>
branch ISub             := <Primary as obj> <S> '-=' <S> <Expression as expr>
group  AugAssign        := IAdd | ISub
                       
branch BreakClass       := 'break'
branch ContinueClass    := 'continue'
group  LoopControlGR    := BreakClass | ContinueClass
                       
branch Annotation       := <Variable as name> ':' <S> <Expression as type>
branch Raise            := 'raise' <S> <Expression as expr> ?[ <S> 'from' <S> <Expression as cause> ]
branch PassClass        := 'pass'
branch EmptyLine        := $''
branch Assert           := 'assert' <S> <Expression as test> ?[<CS> <Expression as msg>]
branch StatementExpr    := <Expression as expr>
group  Statement        := ReturnGR | AssignGR | AugAssign | ScopeGR | Assert | Comment | Annotation | ImportGR | Raise | PassClass | LoopControlGR | Call | StatementExpr | MultiLineStatement #| EmptyLine

########################################################################################################################
# FOOTER
########################################################################################################################

branch ExprEnum        := <CS>.<Expression in items>
group  Returnable      := Expression | ExprEnum
                      
branch NamedArgument   := <Variable as name> '=' <Expression as expr>  # TODO : renamed attribute expr to value, then use the alias DefaultValue
branch SArgument       := '*' <Expression as expr>
branch SSArgument      := '**' <Expression as expr>
group  CallArgumentGR  := NamedArgument | SArgument | SSArgument | Expression
                      
branch Except          := <N> 'except' <S> <Expression as error> ?[<S> 'as' <S> <Variable as as_>] ':' <Block as block>
branch Module          := <N>.<Statement in statements>
group  CodeGR          := DottedAsName | EmptyLine | ForIfClause | Args | ImportFromTargets | ImportRelative | StarTargetsGR | SliceGR | IndentedCallBody | Decorator | WithItem | Alias | EmptyLine | CallArgumentGR | DefArgumentGR | Module | Statement | Block | ElseGR | DictItem | ImportPath | Except | Returnable | IndentedExprEnum
                      
>Module               