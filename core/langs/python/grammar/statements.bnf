branch Yield         := 'yield' <S> <Returnable as expr>
branch YieldFrom     := 'yield' <S> 'from' <S> <Returnable as expr>
branch Return        := 'return' ?[<S> <Returnable as expr>]
group  ReturnGR      := Return | YieldFrom | Yield

branch AnnAssign     := <Primary as target> ?[':' <S> <Expression as annotation>] ?[<S> '=' <S> <Expression as value>]
branch AssignTuple   := <CS>..<Primary in args> <S> '=' <S> <Expression as value>
group  AssignGR      := AnnAssign | AssignTuple

branch IAdd          := <Primary as obj> <S> '+=' <S> <Expression as expr>
branch ISub          := <Primary as obj> <S> '-=' <S> <Expression as expr>
group  AugAssign       := IAdd | ISub

branch BreakClass    := 'break'
branch ContinueClass := 'continue'
group  LoopControlGR := BreakClass | ContinueClass

branch Annotation    := <Variable as name> ':' <S> <Expression as type>
branch Raise         := 'raise' <S> <Expression as expr> ?[ <S> 'from' <S> <Expression as cause> ]
branch PassClass     := 'pass'
branch EmptyLine     := $''
branch Assert        := 'assert' <S> <Expression as test> ?[<CS> <Expression as msg>]
branch StatementExpr := <Expression as expr>
group  Statement     := ReturnGR | AssignGR | AugAssign | ScopeGR | Assert | Comment | Annotation | ImportGR | Raise | PassClass | LoopControlGR | Call | StatementExpr | MultiLineStatement #| EmptyLine