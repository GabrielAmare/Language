branch Block '    ' := *[<N> <Statement in statements>]
branch Args := <CS>.<Primary in variables>

branch Argument           := <Variable as name> ?[':' <S> <Expression as type>] ?[<S> '=' <S> <Expression as default>]
branch NonKeywordArgument := '*' <Variable as name> ?[':' <S> <Expression as type>]
branch KeywordArgument    := '**' <Variable as name> ?[':' <S> <Expression as type>]
group  DefArgumentGR      := Argument | NonKeywordArgument | KeywordArgument

branch Decorator      := '@' <Expression as expr>
alias  DecoratorList  := *[<Decorator in decorators> <N>]
alias  FunctionReturn := <S> '->' <S> <Expression as rtype>
branch Def            := <DecoratorList> 'def' <S> <Variable as name> '(' ?[<CS>.<DefArgumentGR in args>] ')' ?<FunctionReturn> ':' <Block as block>
branch Class          := <DecoratorList> 'class' <S> <Variable as name> ?['(' <Args as mro> ')'] ':' <Block as block>
group  ClassGR        := Def | Class

group  MultiLineStatement := ClassGR | MultiLineString

branch DictItem := <Expression as key> ':' <S> <Expression as value> # TODO : renamed to KVPair

branch NoneClass     := 'None'
branch TrueClass     := 'True'
branch FalseClass    := 'False'
branch EllipsisClass := '...'
group  Constant      := NoneClass | TrueClass | FalseClass | EllipsisClass | Integer | Float | String

group  AtomGR     := Variable | Constant #| ListComp

branch StarTargets   := <CS>..<AtomGR in elts>
group  StarTargetsGR := StarTargets | Variable

branch ForIfClause := <S> <ForPrefix> <Disjunction as iter> *[<S> 'if' <S> <Disjunction in ifs>]

branch Tuple := '(' <CS>..<Expression in items> ')'
branch GenExp := '(' <Expression as elt> +<ForIfClause in generators> ')'

branch IndentedList := '[' <IndentedExprEnum as body> <N> ']'
branch List := '[' <CS>.<Expression in items> ']'
branch ListComp := '[' <Expression as elt> +<ForIfClause in generators> ']'

branch Dict := '{' <CS>.<DictItem in items> '}' # TODO : implement DoubleStarredKVPair
branch DictComp := '{' <DictItem as elt> +<ForIfClause in generators> '}'

branch Set := '{' <CS>.<Expression in items> '}'
branch SetComp := '{' <Expression as elt> +<ForIfClause in generators> '}'

group  DataGR := Tuple | GenExp | List | ListComp | Dict | DictComp | Set | SetComp | IndentedList | AtomGR

branch IndentedExprEnum '    ' := <N> <CN>.<Expression in items>

branch Slice   := ?<Expression as lower> ':' ?<Expression as upper> ?[':' <S> <Expression as step>]
group  SliceGR := Slice | Expression

branch Subscript := <Primary as left> '[' <SliceGR as right> ']'
branch GetAttr := <Primary as left> '.' <Variable as right>
branch Call := <Primary as left> '(' <CS>.< CallArgumentGR in args> ')'
branch IndentedCallBody '    ' := <N> <CN>.<CallArgumentGR in args>
branch IndentedCall := <Primary as left> '(' <IndentedCallBody as body> <N> ')'
group  Primary := Subscript | GetAttr | Call | IndentedCall | DataGR