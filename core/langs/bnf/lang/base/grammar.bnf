regex   String '\"(?:\"|[^\"])*?(?<!\\\\)\"|\'(?:\'|[^\'])*?(?<!\\\\)\''
regex   Integer '\-?\d+'
regex   Variable '[a-zA-Z_]\w*'
regex   WHITESPACE '\s+' ignore
regex   COMMENT '#.*' ignore

alias  PriorityAL := ?['[' <Integer as priority> ']']
alias  IgnoreAL := ?[$' ' <Ignore as ignore_>]
alias  BasePattern := <PriorityAL> $' ' <Variable as type> ?['(' <Variable as cast> ')'] $' ' <String as expr>
branch Ignore := 'ignore'
branch StringPattern := 'string' $' ' <BasePattern> <IgnoreAL>
branch RegexPattern := 'regex' $' ' $' ' <BasePattern> ?[$' ' <Integer as flags>] <IgnoreAL>
branch KeywordPattern := 'keyword' <BasePattern> <IgnoreAL>
group  PatternGR := StringPattern | RegexPattern | KeywordPattern
branch Lexer := $'\n'.<PatternGR in patterns>
branch MatchAs := '<' <Variable as type> $' ' 'as' $' ' <Variable as key> '>'
branch MatchIn := '<' <Variable as type> $' ' 'in' $' ' <Variable as key> '>'
group  MatchKeyGR := MatchAs | MatchIn
branch Match := '<' <Variable as type> '>'
group  MatchGR := MatchKeyGR | Match
branch Canonical := '$' <String as expr>
branch Literal := <String as expr>
group  AtomGR := Canonical | Literal | MatchGR
branch Grouping := '[' <ParallelGR as rule> ']'
group  GroupingGR := Grouping | AtomGR
branch Negative := '!' <GroupingGR as rule>
group  NegativeGR := Negative | GroupingGR
branch Repeat := '{' ?<Integer as mn> ',' ?<Integer as mx> '}' <NegativeGR as rule>
branch RepeatStar := '*' <NegativeGR as rule>
branch RepeatPlus := '+' <NegativeGR as rule>
branch Optional := '?' <NegativeGR as rule>
branch Enum0 := <NegativeGR as separator> '.' <NegativeGR as element>
branch Enum1 := <NegativeGR as separator> '.' '.' <NegativeGR as element>
group  RepeatGR := Repeat | RepeatStar | RepeatPlus | Optional | Enum0 | Enum1 | NegativeGR
branch Sequence := $' '..<RepeatGR in rules>
group  SequenceGR := Sequence | RepeatGR
branch Parallel := [$' ' '|' $' ']..<SequenceGR in rules>
group  ParallelGR := Parallel | SequenceGR
alias  LinePrefixAL := ?[$' ' <String as line_prefix>]
branch Branch := 'branch' <PriorityAL> $' ' <Variable as type> <LinePrefixAL> $' ' ':=' $' ' <ParallelGR as rule>
branch Alias := 'alias' $' ' $' ' <Variable as type> <LinePrefixAL> $' ' ':=' $' ' <ParallelGR as rule>
branch Group := 'group' $' ' $' ' <Variable as type> $' ' ':=' $' ' [$' ' '|' $' '].<Variable in types>
group  BranchGR := Branch | Alias | Group
group  Buildable := BranchGR | ParallelGR
group  TopLevel := BranchGR | PatternGR
branch Parser := $'\n'.<BranchGR in branches> $'\n' $'\n' '>' $' ' <Variable as start>
branch Reader := <Lexer as lexer> $'\n' $'\n' <Parser as parser>
group  All := String | Variable | Integer | Ignore | TopLevel | Buildable | Lexer | Parser | Reader

> Reader