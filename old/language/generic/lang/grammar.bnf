########################################################################################################################
# LEXER
########################################################################################################################

regex   String '\".*?\"|\'.*?\''     
regex   Integer '\-?\d+'             
regex   Variable '[a-zA-Z_]\w*'      
regex   MetaVariable '\$[a-zA-Z_]\w*'
regex   WHITESPACE '\s+' ignore      
regex   COMMENT '#.*' ignore         

########################################################################################################################
# ALIASES
########################################################################################################################

alias S                 := $' '
alias N                 := '\n'
alias CS                := ',' <S>
alias  SubScope         := <S> '{' <Block as block> <N> '}'
alias  Condition        := <S> '(' <Expression as test> ')'
alias  Iterable         := <S> 'in' <S> <Expression as iterable>
alias  ExpressionValue  := <S> <Expression as value>
alias  DuckType         := ':' <S> <Expression as type>

########################################################################################################################
# EXPRESSIONS
########################################################################################################################

branch TrueConstant   := 'true'
branch FalseConstant  := 'false'
branch NullConstant   := 'null'
group  Constant       := Integer | String | TrueConstant | FalseConstant | NullConstant
                     
group  Atom           := Variable | Constant
                     
branch VarKeyPair     := <Variable as key> ':' <ExpressionValue>
branch StrKeyPair     := <String as key> ':' <ExpressionValue>
group  KeyPair        := VarKeyPair | StrKeyPair
                     
branch List           := '[' <CS>.<Expression in items> ']'
branch Dict           := '{' <CS>.<KeyPair in items> '}'
branch Call           := <Primary as obj> '(' <CS>.<Expression in args> ')'
group  Primary        := List | Dict | Constant
                     
branch Append         := <Primary as obj> '.' 'append' '(' <Expression as item> ')'
branch Length         := <Primary as obj> '.' 'length' '(' ')'
group  Secondary      := Append | Length | Primary
                     
branch Mul            := <Term as left> <S> '*' <S> <Secondary as right>
branch Div            := <Term as left> <S> '/' <S> <Secondary as right>
group  Term           := Mul | Div | Secondary
                     
branch Add            := <Sum as left> <S> '+' <S> <Term as right>
branch Sub            := <Sum as left> <S> '-' <S> <Term as right>
group  Sum            := Add | Sub | Term
                     
branch Eq             := <Sum as left> <S> '==' <S> <Sum as right>
branch In             := <Sum as left> <S> 'in' <S> <Sum as right>
group  Comparison     := Eq | In | Sum
                     
group  Expression     := Comparison

########################################################################################################################
# STATEMENTS
########################################################################################################################

branch Except        := 'except' <S> '(' <Variable as name> ':' <S> <Expression as type> ')' <SubScope>
branch Block '    '  := *[<N> <Statement in statements>]
branch Argument      := <Variable as name> ?<DuckType> ?[<S> '=' <ExpressionValue>]
branch Elif          := <S> 'elif' <Condition> <SubScope> <Alt as alt>
branch Else          := <S> 'else' <SubScope>
group  Alt           := Elif | Else
                    
alias  RngFrom       := <S> 'from' <S> <Integer as start>
alias  RngTo         := <S> 'to' <S> <Integer as end>
alias  RngBy         := <S> 'by' <S> <Integer as step>
branch If            := 'if' <Condition> <SubScope> <Alt as alt>
branch For           := 'for' <S> '(' <Variable as index> ?<RngFrom> <RngTo> ?<RngBy> ')' <SubScope>
branch Enum          := 'enum' <S> '(' <Variable as item> ?[<CS> <Variable as index>] <Iterable> ')' <SubScope>
branch While         := 'while' <Condition> <SubScope>
branch Try           := 'try' <SubScope> +<Except in excepts>
group  ControlSTMT   := If | For | Enum | While | Try
                    
branch Function      := 'fun' <S> <Variable as name> '(' <CS>.<Argument in args> ')' <SubScope>
branch VariableDef   := 'var' <S> <Variable as target> ?<DuckType> <S> '=' <ExpressionValue>
branch ConstantDef   := 'con' <S> <Variable as target> ?<DuckType> <S> '=' <ExpressionValue>
branch Assign        := 'set' <CS>.<Primary in targets> <S> '=' <ExpressionValue>
group  UpdateSTMT    := Function | VariableDef | ConstantDef | Assign | ControlSTMT
                    
branch Return        := 'return' ?[<S> <CS>.<Expression in values>]
branch Raise         := 'raise' <ExpressionValue>
branch Export        := 'export' <S> <CS>.<Variable in names>
branch Docstring     := 'doc' <String as value>
group  Statement     := Docstring | Return | Raise | Export | UpdateSTMT

########################################################################################################################
# FOOTER
########################################################################################################################

branch Module  := <N>.<Statement in statements>
group  Code    := Module | Statement | Expression
              
> Module      