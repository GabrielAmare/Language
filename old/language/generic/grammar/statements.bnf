branch Except := 'except' <S> '(' <Variable as name> ':' <S> <Expression as type> ')' <SubScope>
branch Block '    ' := *[<N> <Statement in statements>]
branch Argument := <Variable as name> ?<DuckType> ?[<S> '=' <ExpressionValue>]

branch Elif := <S> 'elif' <Condition> <SubScope> <Alt as alt>
branch Else := <S> 'else' <SubScope>
group  Alt  := Elif | Else

alias  RngFrom := <S> 'from' <S> <Integer as start>
alias  RngTo := <S> 'to' <S> <Integer as end>
alias  RngBy := <S> 'by' <S> <Integer as step>

branch If   := 'if' <Condition> <SubScope> <Alt as alt>
branch For := 'for' <S> '(' <Variable as index> ?<RngFrom> <RngTo> ?<RngBy> ')' <SubScope>
branch Enum := 'enum' <S> '(' <Variable as item> ?[<CS> <Variable as index>] <Iterable> ')' <SubScope>
branch While := 'while' <Condition> <SubScope>
branch Try := 'try' <SubScope> +<Except in excepts>
group  ControlSTMT := If | For | Enum | While | Try

branch Function    := 'fun' <S> <Variable as name> '(' <CS>.<Argument in args> ')' <SubScope>
branch VariableDef := 'var' <S> <Variable as target> ?<DuckType> <S> '=' <ExpressionValue>
branch ConstantDef := 'con' <S> <Variable as target> ?<DuckType> <S> '=' <ExpressionValue>
branch Assign      := 'set' <CS>.<Primary in targets> <S> '=' <ExpressionValue>
group  UpdateSTMT  := Function | VariableDef | ConstantDef | Assign | ControlSTMT

branch Return     := 'return' ?[<S> <CS>.<Expression in values>]
branch Raise      := 'raise' <ExpressionValue>
branch Export     := 'export' <S> <CS>.<Variable in names>
branch Docstring  := 'doc' <String as value>
group  Statement  := Docstring | Return | Raise | Export | UpdateSTMT