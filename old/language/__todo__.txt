TODO : Implement language versioning. each `lang` package should have a version.
TODO : Implement Atom Class casting
    for example, Variable -> str
    this needs to be implemented to various levels in the code
    builders:
        ModelsBuilder:
            AnnotationsBuilder:
                `k1: Variable` -> `k1: str`
                `k2: String` -> `k2: str`
                `k3: Decimal` -> `k3: float`
                `k4: Integer` -> `k4: int`
                `k5: Boolean` -> `k5: bool`
                `k6: True` -> `k6: bool`
                `k7: False` -> `k7: bool`
            ParseBuilder:
                whenever the parse method should be called from the Atom class
            StrBuilder:
                `yield from self.k1.__istr__` -> `yield self.k1`
                `yield from self.k2.__istr__` -> `yield repr(self.k2)`
                `yield from self.k3.__istr__` -> `yield repr(self.k3)`
                `yield from self.k4.__istr__` -> `yield repr(self.k4)`
                `yield from self.k5.__istr__` -> `yield 'BooleanName' if self.k5 else ''` # it looks like a special case
    processors:
        ...
TODO : find a way to handle reading relying on indent (maybe using a context while processing)
TODO : On simplifying reader it seems like if we replace an alias which is used as the separator of an enum
       and its rule is not a GroupingGR object, it doesn't get grouped.
       This leads to a wrong grammar notation once written.