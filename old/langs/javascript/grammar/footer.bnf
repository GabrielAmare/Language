branch ElseIf := <S> 'else' <S> 'if' <S> <Condition> <SScope> ?<ElseGR as alt>
branch Else := <S> 'else' <SScope>
group  ElseGR := ElseIf | Else

branch DefArgs := <CS>.<Variable in items>
branch CallArgs := <CS>.<Expression in items>
branch Block '  ' := *[<N> <Statement in statements>]

branch VariableList := '[' <CS>.<Variable in variables> ']'
group  ModelGR := VariableList | Variable

branch Const := 'const' <S> <ModelGR as model>
branch Let := 'let' <S> <ModelGR as model>
branch Var := 'var' <S> <ModelGR as model>
group  ModelDefGR := Const | Let | Var | ModelGR

branch Catch := <S> 'catch' <S> '(' <Variable as name> ?[<S> 'if' <RExpr>] ')' <SScope>

branch Function := 'function' <S> <Variable as name> '(' <DefArgs as args> ')' <SScope>
branch Return := 'return' <RExpr> <SC>
branch Throw := 'throw' <RExpr> <SC>
branch If := 'if' <S> <Condition> <SScope> ?<ElseGR as alt>
branch Try := 'try' <SScope> *<Catch in catches>
branch While := 'while' <S> <Condition> <SScope>
branch Assign := <ModelDefGR as obj> <S> '=' <RExpr> <SC>
branch ForOf := 'for' <S> '(' <ModelDefGR as key> <S> 'of' <RExpr> ')' <SScope>
branch Export := 'export' <S> '{' <S> <CS>.<Variable in items> <S> '}' <SC>
group  Statement := Function | Return | Throw | If | While | Assign | ForOf

branch Module := <N>.<Statement in statements>

group  All := DictItem | Export | Try | Module | Expression | Statement | ElseGR | ModelDefGR | DefArgs | CallArgs | Block | Catch

>Module